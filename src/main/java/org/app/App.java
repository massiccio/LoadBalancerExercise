/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.app;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Logger;

import org.lb.LoadBalancer;
import org.lb.LoadBalancerImpl;
import org.lb.policies.LBPolicyFactory;
import org.lb.provider.DefaultProvider;
import org.lb.provider.Provider;

public class App {

	private static final int THREADS = 5;
	private static final int REQ_PER_THREAD = 100_000;
	private static final int PROVIDERS = 10;
	private static final int MAX_PROVIDERS = 7;

	private static Logger logger = Logger.getLogger(App.class.getName());

	

	private static List<Provider> createProviders(int providers) {
		List<Provider> list = new ArrayList<>();
		for (int i = 0; i < providers; i++) {
			list.add(new DefaultProvider(i));
		}
		return list;
	}

	private static LoadBalancer setupLoadBalancer() {
		LoadBalancer lb = new LoadBalancerImpl(2, LBPolicyFactory.createRandomPolicy(7));
		int registered = lb.register(createProviders(PROVIDERS));
		// can only register 7 providers!
		if (registered != Math.min(PROVIDERS, MAX_PROVIDERS)) {
			throw new IllegalStateException();
		}
		logger.info("Registered " + registered + " providers.");
		return lb;
	}

	/**
	 * In this scenario the first provider has been excluded and therefore it never
	 * gets selected.
	 */
	public void disableOneProvider() throws InterruptedException {
		var lb = setupLoadBalancer();
		lb.include(0, false); // exclude the first provider

		lb.start(); // first heart beat happens immediately
		Thread.sleep(500L); // wait till the heartbeat completes

		CountDownLatch startSignal = new CountDownLatch(1);
		CountDownLatch doneSignal = new CountDownLatch(THREADS);
		Utils.startThreads(lb, THREADS, REQ_PER_THREAD, startSignal, doneSignal);

		// start all threads at the same time
		startSignal.countDown();
		Utils.waitCompletion(doneSignal);

		Thread.sleep(500L);
		lb.stop();

		Utils.printSummary(lb);
	}

	/** No changes. */
	public void baseCase() throws InterruptedException {
		var lb = setupLoadBalancer();

		lb.start(); // first heart beat happens immediately
		Thread.sleep(500L); // wait till the heartbeat completes

		CountDownLatch startSignal = new CountDownLatch(1);
		CountDownLatch doneSignal = new CountDownLatch(THREADS);
		Utils.startThreads(lb, THREADS, REQ_PER_THREAD, startSignal, doneSignal);

		// start all threads at the same time
		startSignal.countDown();
		Utils.waitCompletion(doneSignal);

		Thread.sleep(500L);
		lb.stop();

		Utils.printSummary(lb);
	}
	

	public static void main(String[] args) throws InterruptedException {
		logger.info("Running base case...");
		new App().baseCase();
		
		
		logger.info("Running scenario where one provider is disabled");
		new App().disableOneProvider();
	}
}
